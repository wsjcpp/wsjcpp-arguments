#!/usr/bin/wsjcpp-safe-scripting

# log_info rootdir
# log_info script_filename

make_dir "src"

var argument_processor_name
set_value argument_processor_name arg1
normalize_class_name argument_processor_name
convert_CamelCase_to_snake_case argument_processor_name argument_processor_name

var class_name
concat class_name "ArgumentProcessor" arg1
normalize_class_name class_name

var base_filename
convert_CamelCase_to_snake_case class_name base_filename
# log_info base_filename

var filename_cpp
concat filename_cpp "./src/" base_filename ".cpp"

var filename_h
concat filename_h "./src/" base_filename ".h"

var ifndef_header
set_value ifndef_header base_filename
concat ifndef_header "_H"

to_upper_case ifndef_header

var content_header
concat content_header "#ifndef " ifndef_header "
#define " ifndef_header "

#include <wsjcpp_arguments.h>

class " class_name " : public WsjcppArgumentProcessor {
    public:
        " class_name "();

        virtual bool applyParameterArgument(const std::string &sProgramName, const std::string &sArgumentName, const std::string &sValue) override;
        virtual bool applySingleArgument(const std::string &sProgramName, const std::string &sArgumentName) override;
        virtual int exec(const std::vector<std::string> &vRoutes, const std::vector<std::string> &vSubParams) override;
};

#endif // " ifndef_header

 
var content_source
concat content_source  "
#include \"" base_filename ".h\"
#include <wsjcpp_core.h>

// ---------------------------------------------------------------------
// " class_name "

" class_name "::" class_name "() 
: WsjcppArgumentProcessor({\"" argument_processor_name "\"}, \"TODO short description\", \"TODO long description\") {
    TAG = \"" class_name "\";
    // registrySingleArgument(\"--single\", \"What exactly do this single param?\");
    // registryParameterArgument(\"-param\", \"N\", \"What need this param?\");
    // registryExample(\"here example of command\");
    // registryProcessor(new ArgumentProcessorOtherProcessor());
}

// ---------------------------------------------------------------------

bool " class_name "::applySingleArgument(const std::string &sProgramName, const std::string &sArgumentName) {
    WsjcppLog::err(TAG, \"Not implemented\");
    return false;
}

// ---------------------------------------------------------------------

bool " class_name "::applyParameterArgument(
    const std::string &sProgramName, 
    const std::string &sArgumentName, 
    const std::string &sValue
) {
    WsjcppLog::err(TAG, \"Not implemented\");
    return false;
}

// ---------------------------------------------------------------------

int " class_name "::exec(const std::vector<std::string> &vRoutes, const std::vector<std::string> &vSubParams) {
    WsjcppLog::err(TAG, \"Not implemented\");
    return -10;
}
"

var file_source
concat file_source "src/" filename_cpp

write_file filename_h content_header
write_file filename_cpp content_source

log_info "
======
Generated class:
    - " class_name "
Generated files:
    - " filename_h "
    - " filename_cpp "
======
"

cmakelists_txt_append_wsjcpp filename_h
cmakelists_txt_append_wsjcpp filename_cpp
